From: =?utf-8?q?Pierre-Elliott_B=C3=A9cue?= <becue@crans.org>
Date: Mon, 6 Aug 2018 00:10:18 +0200
Subject: django-q API changed, Async class became AsyncTask

---
 hyperkitty/tasks.py | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/hyperkitty/tasks.py b/hyperkitty/tasks.py
index ca2abcf..0c37e70 100644
--- a/hyperkitty/tasks.py
+++ b/hyperkitty/tasks.py
@@ -32,7 +32,7 @@ from django.conf import settings
 from django.core.cache.utils import make_template_fragment_key
 from django.core.cache import cache
 from django_q.conf import Conf
-from django_q.tasks import Async
+from django_q.tasks import AsyncTask
 from mailmanclient import MailmanConnectionError
 
 from hyperkitty.lib.analysis import compute_thread_order_and_depth
@@ -84,7 +84,7 @@ def process_task_result(task):
         log.debug(task.result)
 
 
-class SingletonAsync(Async):
+class SingletonAsync(AsyncTask):
     """A singleton task implementation.
 
     A singleton task does not enqueue the function if there's already one in
@@ -185,7 +185,7 @@ class SingletonAsync(Async):
 
         Adds a ``delay()`` method to the decorated function which will run it
         asynchronously with the provided arguments.  The arguments accepted by
-        the :py:class:`Async` class are accepted here too.
+        the :py:class:`AsyncTask` class are accepted here too.
         """
         def delay(*args, **kwargs):
             if kwargs.get("sync", False) or Conf.SYNC:
@@ -220,7 +220,7 @@ class SingletonAsync(Async):
 def async_task(f):
     @wraps(f)
     def wrapper(*args, **kwargs):
-        task = Async(f, *args, **kwargs)
+        task = AsyncTask(f, *args, **kwargs)
         return task.run()
     return wrapper
 
